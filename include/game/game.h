#pragma once

#define __size 4
#define GAME_FIELD_WIDHT 11
#define GAME_FIELD_HEIGHT 21
#define GAME_FIELD_FULL_HEIGHT 24
#define VIRTUAL_GAME_FIELD_OFFSET 3
#define BLOCK_SIZE 30

typedef enum {
  SCREEN_WELCOME,
  SCREEN_HOW_TO_PLAY,
  SCREEN_GAME_PLAY,
  SCREEN_GAME_PAUSE,
  SCREEN_GAME_OVER
} SCREEN;

typedef struct {
  int call_every_ms; // should be mutiple of 10
  void (*handler)();
  volatile int counter;
} Event;

// https://tetris.wiki/Tetromino
typedef enum {
  SHAPE_I,
  SHAPE_O,
  SHAPE_T,
  SHAPE_S,
  SHAPE_Z,
  SHAPE_J,
  SHAPE_L
} Shape;

typedef enum {
  CYAN, // light blue
  YELLOW,
  PURPLE,
  GREEN,
  RED,
  BLUE,
  ORANGE,
  CLEAR,
  BRICK
} Color;

// initial 0 angle for each piece will look like this: https://tetris.wiki/Tetromino
typedef enum {
  ANGLE_0,
  ANGLE_90,
  ANGLE_180,
  ANGLE_270
} Angle;

typedef struct {
  int x;
  int y;
} Point;

// dynamic piece in the board (should be one moving piece and one next spawn piece existed at a time)
typedef struct {
  Shape shape;
  Color color;
  Angle angle;
  Point center_point; // position of the center point, this is x, y position in the 2D array
} Piece;

// static block that have settle down (generated by the previous dynamic pieces)
typedef struct {
  Color color;
} Block;


enum Difficulty {
  EASY,
  MEDIUM,
  HARD
};

// Global variables
extern volatile SCREEN current_screen;
extern volatile int current_difficulty;
extern const unsigned int OFFSET_PHYSICAL_GAME_FIELD_X;
extern const unsigned int OFFSET_PHYSICAL_GAME_FIELD_Y;
extern const unsigned int OFFSET_PHYSICAL_NEXT_FRAME_X;
extern const unsigned int OFFSET_PHYSICAL_NEXT_FRAME_Y;
extern Block static_game_field[GAME_FIELD_FULL_HEIGHT][GAME_FIELD_WIDHT];
extern volatile int random_counter;
extern unsigned int scores;
extern const int score_step;
extern volatile int spawned_pieces;
extern volatile int frozen_level;
extern volatile int completed_rows;
extern volatile int total_received_commands;
extern volatile int total_rotation_commands;
extern volatile int total_left_commands;
extern volatile int total_right_commands;
extern volatile int total_down_commands;

// Flow control
void handle_game_mode();
void _uart_scanning_callback();
void _handle_game_mode_internal();
void _handle_timing_events();
void _handle_events_call_every_50ms();
void _handle_events_call_every_100ms();
void _handle_events_call_every_200ms();
void _handle_events_call_every_500ms();
void _handle_events_call_every_1s();
int _handle_screen_game_play_internal();
void _reset_timer_counters();

// Game play utils
void _game_progess_event();
void switch_to_game_play_screen();
void _init_game();
void _increase_current_piece();
void _move_piece_left(Piece *piece);
void _move_piece_right(Piece *piece);
void _move_piece_down(Piece *piece);
void _rotate_piece(Piece *piece); // rotate only Angle attribute
void _check_settle_down_and_move_game_state(Piece *piece);
void _prepare_next_game_state_after_settling();
int _is_easy_mode();
int _is_medium_mode();
int _is_hard_mode();
